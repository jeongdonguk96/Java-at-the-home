변수와 매서드
  int(정수)
  double(실수(소수))
  String(문자열)  = " "
  char(문자) = ' '
  Casting = 변수의 타입을 바꿔야 하는 경우(int to String or Stiring to int)
  Boolean = 참과 거짓. 단 두가지만 나타낼 수 있다. 
                true, false는 변수이름으로 사용할 수 없다.(오직 boolean에 고정)
                (=reserved word)
  null = 값이 없다.
  변수유형에는 primitive/nonprimitive로 나뉜다.
  

ctrl + shift + C = 주석처리
ctrl + / = 주석처리
윈도우키+R = 검색 (cmd)
alt + shift + L = 변수화
alt + shift + M = 매서드화
alt + 방향키 = 줄바꿈
Overload = 기존에 있는 매서드와 같은 이름의 매서드를 다른 기능으로 사용.

문자열
  \n = 뉴라인(줄바꿈)
  \" \" = 이스케이프(내용에 " " 생성 - 문자열에서는 큰따옴표 사용불가능)
  .length = 글자 수
  .replace = 내용 교체

연산자(=Operator)
  1+1=2 / "1"+"1"="11"
 -비교연산자(Comparison Operator)는 그 값이 true와 false로만 나오는 연산자 
 
 -논리연산자(Logical Operator)는 AND, OR, NOT 3개가 있는데
  AND(&&)는 두개가 다 true 시 값이 true, 하나라도(둘 다도 포함) 틀릴 시 false.
  OR(||)은 둘 중 하나라도 true 시 값이 true.
  NOT(!)은 !를 붙이면 값이 반대로 나오는 연산자다. (true가 false, false가 true) 
 
 -동등비교연산자(==)는 같은 위치에 있는 값이 같은지 확인하는 것. = primitive
  .equals()는 비교대상을 객체로 보기 때문에 = nonprimitive
  nonprimitive타입은 메모리 상에 별개의 공간에 저장된다.
  String은 nonprimitive타입이지만 너무 자주 쓰여 =등을 사용할 수 있게 했다.
  

디버깅
  break point = 더블클릭으로 해당 라인 코드 디버깅
  step over = 코드를 한 줄씩 디버깅
  step into = 해당 라인의 메소드의 코드를 확인
  step return = 되돌아가기
  play(resume) = 체크한 곳까지 디버깅 실행
  terminate = 디버깅 종료

입력값
  입력값을 사용하면 모든 변수를 따로 지정하지 않아도 되고
  한번의 입력으로 선택한 변수의 값을 정할 수 있다.
  = 내장된 값이 아니라 사용자의 input에 따라 프로그램이 작동한다.
  모든 변수형태에 사용 가능하다.

파라미터(=매개변수)(run configurations 사용)
  args 등의 매개변수를 이용해 아규먼트(인자)에 다양한 값을
  미리 입력시켜 배열을 이용해 메인 클래스에 여러 값을 입력할 수 있다.
  기본적으로 String이기 때문에 변수유형을 바꿔야 할 수도 있다.
  (일일이 모든 변수값에 입력해줘야 하는 번거로움을 덜어냄. 0부터 시작)

Path
  윈도우키+R = 검색 (cmd)
  해당 검색에서 프로그램을 찾을 때 경로를 알려주는 것.
  내컴퓨터 - 속성 - 고급 시스템 속성 - 고급탭 - 환경 변수 - 내 사용자 변수
  path 더블클릭 - 편집 - 붙여넣기로 경로 추가

Package/Class
  Class는 연관된 변수(Variable)와 매서드(Method)를 포함한 묶음.
  Package는 비슷한 유형의 Classs의 묶음.

인스턴스(Instance)
  클래스이름 인스턴스이름 = new 클래스이름
  PrintWriter p2 = new PrintWriter("Result2.txt");
  이때 생성되는 p2를 인스턴스라고 한다.
  하나의 클래스를 복제한 다른 데이터값, 같은 매서드를 가진 복제품

생성자(Constructor)
  

상속(Inheritance)
  하나의 클래스가 가지고 있는 변수와 매서드를 이어받은 하위 클래스.
  부모 클래스 - 자식 클래스라고도 하며 이를 상속관계라 한다.
  부모 클래스의 변수와 매서드 말고도 자신만의 것이 추가되어 있다.(Extends)
  만약 자식 클래스에 없는 매서드를 사용할 때 부모 클래스에
  해당 매서드가 있으면 그것을 근거로 사용할 수 있게 된다.
  그렇지만 매서드의 사용순서(근거)는 가장 하위 클래스의 것을 쓴다.
  부모클래스가 갖고 있는 기능을 (추가하는 등)덮어쓸 수 있다.(Override)
  상속에서 super.은 부모의 코드를 this은 자신의 코드를 의미할 때 쓴다.
  (super.은 당연히 자식클래스에서 사용, this.는 둘 다 사용 가능) 
  

로컬변수추출(변수화 기능)
  alt + shift + L 로 해당 드래그(연산 등)를 변수화 할 수 있다.
  alt를 누르고 방향키를 누르면 해당 줄의 코드를 간섭없이 옮길 수 있다.

배열(Array)
  배열[ ]을 사용함으로써 변수의 가짓수를 하나로 줄일 수 있다.
  그러므로 오류가 날 확률이 낮아진다.
  예를 들어 어느 값을 구할 때 그 가짓수가 1억개라 가정하면
  1억개의 모든 변수의 값을 조정해야하지만
  배열을 사용하면 기본이 되는 단 하나의 변수만 존재하기 때문에
  더 간단해지고 정확해진다.
  double[] dividendRates = new double[3];
	dividendRates[0] = 0.5;
	dividendRates[1] = 0.3;
	dividendRates[2] = 0.2;	
	double dividend1 = income * dividendRates[0];
	double dividend2 = income * dividendRates[1]; 
	double dividend3 = income * dividendRates[2];

매서드(Method) (=함수)
  서로 연관된 코드를 그룹핑해서 이름을 붙힌 정리정돈 상자
  alt + shift + M 로 해당 드래그를 매서드화 시킬 수 있다.
  메인클래스에서 선언한 변수를 다른 클래스에도 사용하려면
  메인클래스 위에 변수를 선언하면 된다. (지역변수 -> 필드(전역변수))
  리팩터에서 사용할 수 있다. 리팩터링을 통한 매서드화는 자바에서 핵심.
  모든 값을 일일이 입력하는 것보다 매서드화와 파라미터를 통해 단순화하자
  매서드에 void는 출력값이 없다는 뜻이고 출력하려면 return을 사용해야한다.
  return을 사용해야 다른 매서드나 클래스에서 사용할 수 있고
  파일들 다른 곳으로 보낼 수 있다. void는 출력값이 없기 때문에 return을 쓰지 않는다.
  return은 해당 매서드를 종료시키며 뒤에 어떤 내용이 와도 처리되지 않는다.
  return값에 맞춰 필요한 데이터타입을 void 자리에 대신 사용해야 한다.

클래스(Class)
  서로 연관된 변수와 매서드를 그룹핑해서 이름을 붙힌 정리정돈 상자
  여러 종류의 변수와 매서드들이 혼재돼도 소속클래스(classname. ~)를 쓰면
  그 변수와 매서드의 소속과 성격을 알수 있다.
  새로운 클래스를 만들어 거기에 코드들을 작성해서 메인클래스에서
  불러내기만 하면 메인클래스가 보기 쉬워진다.
  앞의 클래스만 구분되면 같은 변수와 매서드를 사용할 수 있다.
  리팩터를 사용하면 선택한 클래스를 따로 파일로 만들어 주는 기능이 있다.
  보통의 클래스 매서드에는 static을 쓰지만 인스턴스 매서드는 static을 뺀다.
  인스턴스 클래스나 매서드는 static을 빼고 사용해야 한다.(독립된 개체로 본다.)
  static은 static만 호출 가능하고, non static은 둘 다 호출 가능하다.

제어문
 -반복분(Loop)
  while이나 for을 사용한다.
  계산을 1억번 한다고 가정할 경우 
  원래라면 1억 줄의 코드를 사용해야 하지만
  반복문을 사용하면 단 하나의 코드만으로 1억 개의 로직이 가능하다.
 
 -배열문(Array)
  배열문을 쓰지 않으면 모든 데이터을 일일이 적어줘야 하지만
  한 곳에 적어두고 사용함으로써 불러오기 식으로 간편화할 수 있다.
  배열[]속에서 자릿수를 인덱스, 그 자리의 값을 엘리먼트라 한다.
  String[] a = new String[갯수];
  String[] a = new String{"값", "값", "값"};
  배열문에는 한 코드에 여러 개가 들어갈 수 있다.
  String[][] users = {
	{"mama", "1111"}
  };
  String inputId = args[0];
  String inputPass = args[1];

 -조건문(Conditonal)
  if문. if - else if - else 등 여러 조건 사용 가능하다.
  if() 괄호 안에는 그 값이 true와 false만 되는 비교연산자 형식만 올 수 있다.

  if(inputid.equals(id)) {
	System.out.println("Master");
  } else {
	System.out.println("Who Are You?");
  이때 if()에 inputid == id 가 아닌 이유는 ==는 같은 메모리에 있을
  경우에 확인하는 연산자고 args[0]은 다른 배열(객체)이기 때문에
  .equals()를 쓰는 것이다.

  조건문을 끝내고 싶을 땐 break; 매소드를 쓰면 된다. (로그인 시)

  &&(논리연산자)는 조건문에서 조건이 2개 이상일 때 사용하면
  여러 줄의 코드를 한 줄의 코드로 줄일 수 있다. (id/password)

인터페이스(Interface)
  인터페이스란 어떤 클래스의(를 위한) 양식이다.
  서로 다른 사람이 하나의 클래스를 작성할 때 같은 양식을 사용하기 위함이다.
  하나의 클래스는 여러 개의 인터페이스를 구현할 수 있다.  
  인터페이스에는 매서드와 변수가 정의될 수 있다.
  양식이기 때문에 매서드의 내용이나 출력은 표시하지 않는다.
  그 양식을 따와서(implements 클래스이름) 실제 클래스에서 값을 구현해야한다.
  하지만 변수의 값은 인터페이스에 표시된다.
  다형성이란 여러 인터페이스들 중에서 내가 원하는 기능만 골라
  클래스에서 사용하는 것을 말한다. 그렇게 해서 용량을 줄이거나 할 수 있다.

예외(Exception)
  Exception(예외) = 코드 속에서 예상치 못한 문제가 생겼을 때
  Error(에러) = 프로그램에서 예상치 못한 문제가 생겼을 때
  try{} catch(){} 구문을 통해 코드의 예외의 출력값을 수정하면 된다.
  만약 한 try구문에 2개 이상의 예외를 넣을 경우 첫 예외까지만 출력수정된다.
  Exception은 데이터타입이고 e는 그것의 변수다(e는 어떻게 써도 됨.)
  checked Exception은 따로 체크하지 않으면 컴파일조차 되지 않는다.
  unchecked Exception은 컴파일되고 예외 발생시 표시해준다.
  try with resource statements 구문은 
  try()에서 괄호 안에 close가 필요한 클래스를 인스턴스화한 코드를 넣어주면
  close();를 내부적으로 수행한다.
  resource관련 작업에서는 쓰면 매우 좋다.